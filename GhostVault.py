# Базовые модули Python
import os  # Работа с файловой системой: проверка существования файлов, удаление, работа с путями.
import io  # Работа с потоками данных в памяти (например, для работы с изображениями).
import random  # Генерация случайных чисел, выбор случайных элементов (например, для генерации ключей).
import threading  # Многопоточность: выполнение задач параллельно (например, проверка новых сообщений).
from datetime import datetime, timezone
import tkinter as tk  # Создание графического интерфейса, используется для вызова окна выбора файлов.
from tkinter import filedialog  # Модуль для создания диалогов выбора файлов и директорий.
import time  # Работа с временем, например, для создания задержек (sleep) или измерения времени выполнения.
from queue import Queue  # Потокобезопасная очередь для передачи данных между потоками.
import subprocess # Модуль для запуска системных процессов и выполнения команд ОС
import json # Модуль для работы с json файлами
import zipfile  # Работа с ZIP-архивами: сжатие и распаковка файлов.
from pathlib import Path  # Упрощенная работа с файловой системой, удобное управление путями.
import requests  # Отправка HTTP-запросов: получение данных с веб-серверов, работа с API.
import sys  # Доступ к системным параметрам и аргументам командной строки.
import pytz  # Работа с часовыми поясами: конвертация времени между разными зонами.

# Библиотеки сторонние
import PySimpleGUI as sg  # Библиотека для создания графического интерфейса (окон, кнопок, полей ввода и т.д.).
import psycopg2  # Работа с базой данных PostgreSQL: подключение, выполнение SQL-запросов, управление транзакциями.
import pyperclip  # Работа с буфером обмена (копирование текста в clipboard).
from cryptography.fernet import Fernet  # Шифрование и дешифрование данных для обеспечения безопасности.
from PIL import Image, ImageOps  # Работа с изображениями:
# - Image: открытие, изменение, сохранение изображений.
# - ImageOps: дополнительные операции с изображениями, например, изменение размера.
from playsound import playsound  # Воспроизведение звуков (например, уведомления) без сложных настроек.

# Константы
POSTGRESQL_URL = "https://www.dropbox.com/scl/fi/cjdit048dvc6kz9g2oiir/postgresql-portable-main.zip?rlkey=3dsgoatqy6989vxa53orp08nv&st=cqpihygs&dl=1"
sg.set_options(icon=b'')
LICENSE_KEY = "eRyQJbMFadW9NjlLbonpNalnV7HPlLwQZ5SJI06UI3k9RWlfdUmHVfsCbL3lB6lqcNiaIus1IKkJxDpcYd2AVeuqcf2MVNJ8RiCWIa6qMNTKc2yvOkTmMJ5WMKTsAO1fNfCRwLi0TKGilrjyZfWt5izcZUUVRFlGcPGPxTvDeIWw1hlZbgnPRpWJZjXJJgzcaTW79yu6IpjvonxmLWCRJrOjYLWp1XlMRpm5lKyZcc3dQPisOTi8JVNZQlVah0JwTJSlIXsDIxkw5IhObMWyVRMhYiXzNn06IwjsoqisQJ0ehFVITtU0F8LwTD1iYbiBLFCEJfDybc2417w6YvWZ5x5yIgjno0iiIViAwTiMQv39Vlz5dqGg96t9ZVXBJpJlRDC5In6zItjfQWyVOVTzQy0EIoibwlieRMGYFJ0rZRUrldzPcc3HVDlDZfClId6tIMjTEqw1LHz0ISw6LnzmIvwoM7jdQqiHLkCMJCEhYoXnRylcRPX8hbwha9XtJdlZccyZI166IqjZEzwmLtzqI4wsLqz3I8wrM9jbUJicLjCBJNFfb2W1FNpVbbEfFKkHZxHtJWl4cn3NMEimORiVJfrEY5XtBnpId3GF9jzoa6G1tph4YMWx16y7QXG0dPtMY2Wtl3sgLBmONZvTbVSmIbstI6kjlhQ8QtWzRdkJccmSVWzdcpyqIM61IOjngn5WLvjFQB2qLXjXI3zmOXCG4XxoOnTvAPiWfcQ9=s=N2557ebc9fd1e19890386096eefc382eeb0240112c5cdb0528933da16a8db3d21534920b7e6b0158d6c6416da9c7b9d0b28b62bb06b34533d1348928bc379915c6eebe6a7c528dd6b008bec7357e2087db89156d861d012acffcefffcfedc0be8113013a5dbafb175dc25b6cbc159ef5312296478bd6b26317f594aa98b32cf28b521a07a3e41f784c1592a5355cadcc507299aced0edf6dae2178eccb4dc174a55ceb5e295ac79765ab235f3d8040db9e8d4feaa4230d6b6e8966d384ccceb41d3824d5d70d51ac93dcd200a1e8fe9e5b7347acf21f4581d9e1e1283af4fadc678cfbc23aea61af58601a77335adaa276652709408c335c56196cf121693979b2a5d2cf59192a5f5b366db58890b3599c1e544da8a7a4fea4c77bbe03180cfe1f779ab59c61de53ac3b4d2f85ffd883b7e0dbbf6b828abd2f08c4d9faac68369a5d2ea0293fb82f652d4e99581d45b647cce31559fbdc6023d84fd001ae3291dbedf1baab581c1b704fcdbab598d95b9ad0f6b392fc87255aa868ebea62daf4c9013a986c951609f2173c2231f66869e8b0b21a4c53cfe80968fb324b99f074e0fe62f79355964d5771e6c2c146eeb50c145aab7efb8606a96fc2a2cb3e6621b6c167e413149d099100dd5289b09670557d8a653b705a366655e4ea96aaafd5788a7163e28defb63c78fc340182353904cbf318e29d26c8052256451ff79b36b"
sg.set_options( )

if getattr(sys, 'frozen', False):
    BASE_DIR = sys._MEIPASS
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

TEMP_BANNER = os.path.join(BASE_DIR, 'ghostvault.png')
NEW_MESSAGE_SOUND = os.path.join(BASE_DIR, 'message_in_dialog.mp3')
DEFAULT_AVATAR_PATH = os.path.join(BASE_DIR, 'avatar.png')
CONFIG_FILE = os.path.join(BASE_DIR, 'database_config.db')

def get_db_path():
    """Возвращает корректный путь к database_config.db в зависимости от окружения"""
    if getattr(sys, 'frozen', False):  # Если программа запущена как .exe
        base_path = sys._MEIPASS  # PyInstaller сохраняет временные файлы сюда
    else:
        base_path = os.getcwd()  # В обычном режиме используем текущую директорию

    db_path = os.path.join(base_path, "database_config.db")
    if not os.path.exists(db_path):
        db_path = os.path.join(os.getcwd(), "database_config.db")  # Проверяем в рабочей папке

    return db_path

# Встроенный Master Key
MASTER_KEY = b'Ваш ключ'

# Встроенные зашифрованные ключи
ENCRYPTED_LOGIN_KEY = b'Ваш ключ'
ENCRYPTED_MESSAGE_KEY = b'Ваш ключ'
ENCRYPTED_DB_KEY = b'Ваш ключ'

# Декодируем ключи
cipher = Fernet(MASTER_KEY)
LOGIN_ENCRYPTION_KEY = cipher.decrypt(ENCRYPTED_LOGIN_KEY)
MESSAGE_ENCRYPTION_KEY = cipher.decrypt(ENCRYPTED_MESSAGE_KEY)
STATIC_DB_KEY = cipher.decrypt(ENCRYPTED_DB_KEY)

fernet_login = Fernet(LOGIN_ENCRYPTION_KEY)
fernet_message = Fernet(MESSAGE_ENCRYPTION_KEY)

# Установка пользовательской темы для GhostVault
sg.LOOK_AND_FEEL_TABLE['GhostVault'] = {
    'BACKGROUND': '#1c1c1c',
    'TEXT': '#f0f0f0',
    'INPUT': '#2b2b2b',
    'TEXT_INPUT': '#f0f0f0',
    'SCROLL': '#2b2b2b',
    'BUTTON': ('#f0f0f0', '#444444'),
    'PROGRESS': ('#2b2b2b', '#444444'),
    'BORDER': 3,
    'SLIDER_DEPTH': 0,
    'PROGRESS_DEPTH': 0,
}
sg.theme('GhostVault')

# Установка PostgrePortable
def get_downloads_folder():
    """
    Получает путь к папке Downloads текущего пользователя.
    """
    return Path.home() / "Downloads"

def get_local_folder():
    """
    Получает путь к папке Local текущего пользователя.
    """
    return Path.home() / "Local"

def download_postgresql_portable():
    """
    Скачивает PostgreSQL Portable в папку Downloads и распаковывает его в папке Local.
    """
    try:
        # URL для скачивания Portable PostgreSQL
        downloads_path = get_downloads_folder()
        local_path = get_local_folder()
        zip_path = downloads_path / "postgresql-portable.zip"
        unpack_folder = local_path / "PostgreSQL_Portable"

        # Прогресс-бар для скачивания
        layout = [
            [sg.Text("Скачивание PostgreSQL Portable...")],
            [sg.ProgressBar(100, orientation='h', size=(40, 20), key='progress')],
            [sg.Cancel()]
        ]
        window = sg.Window("Скачивание", layout, finalize=True)
        progress_bar = window['progress']

        try:
            # Скачивание архива
            if not zip_path.exists():
                with requests.get(POSTGRESQL_URL, stream=True) as response:
                    total_size = int(response.headers.get('content-length', 0))
                    with open(zip_path, "wb") as file:
                        downloaded_size = 0
                        for chunk in response.iter_content(chunk_size=1024):
                            if not chunk:
                                break
                            file.write(chunk)
                            downloaded_size += len(chunk)
                            progress_bar.UpdateBar((downloaded_size / total_size) * 100)
                            event, _ = window.read(timeout=10)
                            if event == 'Cancel':
                                sg.popup("Скачивание отменено.")
                                return None
                sg.popup("Скачивание завершено!", title="Успех")
        except requests.exceptions.RequestException as e:
            sg.popup_error(f"Ошибка скачивания: {e}")
        except Exception as e:
            sg.popup_error(f"Произошла ошибка: {e}")
        finally:
            # Убедитесь, что окно закрывается
            if window:
                window.close()

        # Распаковка
        if not unpack_folder.exists():
            sg.popup("Распаковка архива...", title="Распаковка")
            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(unpack_folder)
            sg.popup("Распаковка завершена!", title="Успех")

        return unpack_folder
    except requests.exceptions.RequestException as e:
        sg.popup_error(f"Ошибка скачивания: {e}")
    except zipfile.BadZipFile:
        sg.popup_error("Ошибка: Архив повреждён или не является ZIP-файлом.")
    except Exception as e:
        sg.popup_error(f"Произошла ошибка: {e}")
    finally:
        window.close()

def configure_and_run_postgresql(portable_path):
    """
    Конфигурирует PostgreSQL Portable и запускает его.
    """
    try:
        # Путь к исполняемому файлу PostgreSQLPortable.exe
        exe_path = portable_path / "postgresql-portable-main" / "PostgreSQLPortable" / "PostgreSQLPortable.exe"

        # Проверка наличия исполняемого файла
        if not exe_path.exists():
            sg.popup_error("Файл PostgreSQLPortable.exe не найден. Проверьте структуру распакованных файлов.")
            return False

        # Запуск PostgreSQL Portable
        sg.popup("Запуск PostgreSQL Portable...", title="Запуск")
        subprocess.Popen([str(exe_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        sg.popup("PostgreSQL Portable успешно запущен!", title="Успешно")
        return True

    except subprocess.CalledProcessError as e:
        sg.popup_error(f"Ошибка при настройке или запуске PostgreSQL: {e}")
        return False
    except Exception as e:
        sg.popup_error(f"Произошла ошибка: {e}")
        return False

def check_and_switch_to_online_mode():
    """
    Проверяет, использовать ли онлайн подключение, и переключает статус.
    """
    try:
        # Проверка: если есть файл конфигурации для онлайн подключения
        if os.path.exists(CONFIG_FILE):
            sg.popup("Переход на онлайн-подключение...", title="Онлайн режим")
            return True
        else:
            sg.popup_error("Онлайн конфигурация не найдена. Работайте в локальном режиме.")
            return False
    except Exception as e:
        sg.popup_error(f"Ошибка переключения в онлайн режим: {e}")
        return False

portable_path = download_postgresql_portable()
if portable_path:
    if configure_and_run_postgresql(portable_path):
        # Проверяем возможность перехода на онлайн режим
        is_online = check_and_switch_to_online_mode()
        if is_online:
            print("Программа работает в онлайн режиме.")
        else:
            print("Программа работает в локальном режиме.")

# Функции шифрования
def encrypt_data(data):
    return fernet_login.encrypt(data.encode()).decode()

def encrypt_message(data):
    try:
        return fernet_message.encrypt(data.encode()).decode()
    except Exception as e:
        print(f"[ERROR] Ошибка шифрования сообщения: {e}")
        return None

def save_new_config(dbname, user, password, host, port, config_path=CONFIG_FILE):
    """Шифрует и сохраняет данные подключения в .db файл."""
    cipher = Fernet(STATIC_DB_KEY)
    data = {
        "dbname": dbname,
        "user": user,
        "password": password,
        "host": host,
        "port": port,
    }
    encrypted_data = cipher.encrypt(json.dumps(data).encode())
    with open(config_path, "wb") as db_file:
        db_file.write(encrypted_data)

# Функции дешифрования
def decrypt_data(data):
    try:
        return fernet_login.decrypt(data.encode()).decode()
    except Exception as e:
        sg.popup(f'Ошибка дешифровки: {e}')
        return None

def decrypt_message(data):
    try:
        return fernet_message.decrypt(data.encode()).decode()
    except Exception as e:
        print(f"[ERROR] Ошибка дешифровки сообщения: {e}")
        return None

# Функции работы с базой данных
def load_encrypted_config(config_path=None):
    """Читает и расшифровывает зашифрованный .db файл конфигурации."""
    if config_path is None:
        config_path = get_db_path()

    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Файл конфигурации '{config_path}' не найден.")

    cipher = Fernet(STATIC_DB_KEY)  # Используем статичный ключ для расшифровки
    with open(config_path, "rb") as db_file:
        encrypted_data = db_file.read()

    try:
        decrypted_data = cipher.decrypt(encrypted_data)
        return json.loads(decrypted_data)
    except Exception as e:
        raise ValueError(f"Ошибка расшифровки файла конфигурации: {e}")

# Функция для создания пользователя ghostvault и базы данных
def create_ghostvault_user(server_conn, host, port):
    """Создает пользователя ghostvault, базу данных и таблицы, а затем сохраняет данные подключения в .db файл."""
    layout = [
        [sg.Text("Введите пароль для пользователя ghostvault")],
        [sg.InputText(password_char='*', key="-GHOSTVAULT_PASSWORD-")],
        [sg.Button("Создать пользователя", key="-CREATE_USER-")]
    ]

    window = sg.Window("Создание пользователя ghostvault", layout)
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED or event is None:
            break
        if event == "-CREATE_USER-":
            new_password = values.get("-GHOSTVAULT_PASSWORD-", "").strip()
            if not new_password:
                sg.popup_error("Ошибка", "Пароль не может быть пустым")
                continue

            try:
                server_conn.autocommit = True
                cursor = server_conn.cursor()

                # Создание БД и пользователя
                cursor.execute("CREATE DATABASE ghostvault")
                cursor.execute("CREATE USER ghostvault WITH PASSWORD %s", (new_password,))

                # **Даем пользователю ghostvault права на схему public**
                cursor.execute("ALTER USER ghostvault WITH SUPERUSER;")

                cursor.execute("GRANT ALL PRIVILEGES ON DATABASE ghostvault TO ghostvault")

                # Подключение к ghostvault
                conn = psycopg2.connect(
                    dbname="ghostvault",
                    user="ghostvault",
                    password=new_password,
                    host=host,
                    port=port,
                )
                conn.autocommit = True
                cur = conn.cursor()

                # Выдача прав и создание таблиц
                cur.execute("GRANT ALL ON SCHEMA public TO ghostvault")
                cur.execute("""
                    CREATE TABLE public.users (
	                    id serial4 NOT NULL,
	                    username varchar(50) NOT NULL,
	                    login text NOT NULL,
	                    "password" text NOT NULL,
	                    "key" text NOT NULL,
	                    photo bytea NULL,
	                    CONSTRAINT users_pkey PRIMARY KEY (id),
	                    CONSTRAINT users_username_key UNIQUE (username)
                    );
                """)
                cur.execute("""
                    CREATE TABLE public.dialogs (
	                    id serial4 NOT NULL,
	                    user_id int4 NULL,
	                    recipient_id int4 NULL,
	                    message text NULL,
	                    "timestamp" timestamptz DEFAULT now() NULL,
	                    CONSTRAINT dialogs_pkey PRIMARY KEY (id)
                    );
                """)
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS public.dialog_history (
                        user_id INT REFERENCES public.users(id),
                        recipient_id INT REFERENCES public.users(id),
                        last_message TIMESTAMP,
                        CONSTRAINT dialog_history_pkey PRIMARY KEY (user_id, recipient_id)
                    );
                """)
                conn.commit()
                cur.close()
                conn.close()

                # **СОХРАНЕНИЕ ПАРАМЕТРОВ В database_config.db**
                save_new_config(
                    dbname="ghostvault",
                    user="ghostvault",
                    password=new_password,
                    host=host,
                    port=port
                )

                sg.popup("База данных настроена!", "Файл database_config.db успешно создан.")
                break

            except Exception as e:
                sg.popup_error("Ошибка", f"Ошибка при создании пользователя ghostvault: {e}")

    window.close()

def edit_encrypted_database():
    """Открывает окно для просмотра и редактирования зашифрованных данных в файле database_config.db"""
    try:
        # Читаем текущие данные из файла
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            encrypted_data = f.read()
    except FileNotFoundError:
        sg.popup_error(f"Файл {CONFIG_FILE} не найден!")
        return
    except Exception as e:
        sg.popup_error(f"Ошибка чтения {CONFIG_FILE}: {e}")
        return

    # Создаем окно для редактирования
    layout = [
        [sg.Text("Текущие зашифрованные данные:")],
        [sg.Multiline(encrypted_data, size=(60, 5), disabled=True)],
        [sg.Text("Введите новые зашифрованные данные:")],
        [sg.Multiline("", size=(60, 5), key="-NEW_DATA-")],
        [sg.Button("Сохранить"), sg.Button("Отмена")]
    ]

    window = sg.Window("Редактирование зашифрованных данных", layout, modal=True)

    while True:
        event, values = window.read()

        if event in (sg.WINDOW_CLOSED, "Отмена"):
            break

        if event == "Сохранить":
            new_encrypted_data = values["-NEW_DATA-"].strip()
            if new_encrypted_data:
                try:
                    # Перезаписываем файл новыми данными
                    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
                        f.write(new_encrypted_data)
                    sg.popup("Зашифрованные данные успешно обновлены!")
                except Exception as e:
                    sg.popup_error(f"Ошибка при сохранении данных: {e}")
            else:
                sg.popup_error("Новые данные не могут быть пустыми!")

            break

    window.close()

def connect_to_db():
    """Создает подключение к базе данных, используя зашифрованный .db файл конфигурации."""
    try:
        config = load_encrypted_config()  # Передаем правильный путь
        conn = psycopg2.connect(
            dbname=config['dbname'],
            user=config['user'],
            password=config['password'],
            host=config['host'],
            port=config['port'],
        )
        return conn
    except Exception as e:
        sg.popup_error("Ошибка", f"Не удалось подключиться к базе данных: {e}")
        return None

def get_active_dialogs(current_user_id):
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute('''
            SELECT DISTINCT ON (recipient_id) recipient_id AS user_id
            FROM dialog_history
            WHERE user_id = %s
            UNION
            SELECT DISTINCT ON (user_id) user_id
            FROM dialog_history
            WHERE recipient_id = %s
        ''', (current_user_id, current_user_id))

        user_ids = cur.fetchall()
        active_dialogs = []
        for user_id in user_ids:
            cur.execute('SELECT id, username FROM users WHERE id = %s', (user_id[0],))
            user_data = cur.fetchone()
            if user_data:
                active_dialogs.append(user_data)

        print(f"[DEBUG] Получены активные диалоги: {active_dialogs}")
        return active_dialogs
    except Exception as e:
        print(f'[ERROR] Ошибка получения активных диалогов: {e}')
        return []
    finally:
        cur.close()
        conn.close()

def get_users():
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute('SELECT id, login FROM users')
        users = cur.fetchall()
        decrypted_users = [(user[0], decrypt_data(user[1])) for user in users]
        return decrypted_users
    except Exception as e:
        sg.popup(f'Ошибка получения пользователей: {e}')
        return []
    finally:
        cur.close()
        conn.close()

def get_chat_history(user_id, recipient_id):
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute(
            '''
            SELECT user_id, message, timestamp
            FROM dialogs
            WHERE (user_id = %s AND recipient_id = %s) OR (user_id = %s AND recipient_id = %s)
            ORDER BY timestamp
            ''',
            (user_id, recipient_id, recipient_id, user_id)
        )
        rows = cur.fetchall()
        history = []
        for row in rows:
            decrypted_message = decrypt_message(row[1])
            if decrypted_message is not None:
                history.append((row[0], decrypted_message, row[2]))
            else:
                print(f"[ERROR] Ошибка дешифровки сообщения: {row[1]}")
        return history
    except Exception as e:
        print(f'[ERROR] Ошибка получения истории сообщений: {e}')
        return []
    finally:
        cur.close()
        conn.close()

def find_user(search):
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        # Разделяем введённый текст на username и id, если формат соответствует USERNAME#ID
        if "#" in search:
            username, user_id = search.split("#", 1)
            username = username.strip()
            user_id = user_id.strip()
            cur.execute('SELECT id, username FROM users WHERE username = %s AND id::text = %s', (username, user_id))
        else:
            # Ищем либо по username, либо по id, если текст не содержит "#"
            cur.execute('SELECT id, username FROM users WHERE username ILIKE %s OR id::text = %s',
                        (f'%{search}%', search))

        results = cur.fetchall()
        if not results:
            sg.popup('Пользователь не найден.')
        else:
            sg.popup(f'Найдено пользователей: {len(results)}')
        return results
    except Exception as e:
        sg.popup(f'Ошибка поиска: {e}')
        return []
    finally:
        cur.close()
        conn.close()

def send_message(user_id, recipient_id, message):
    timestamp_utc = datetime.now(timezone.utc)
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        encrypted_message = fernet_message.encrypt(message.encode()).decode()
        print(f"[DEBUG] Отправляемое сообщение: {message}")
        print(f"[DEBUG] Шифрованное сообщение: {encrypted_message}")

        cur.execute(
            '''
            INSERT INTO dialogs (user_id, recipient_id, message, timestamp)
            VALUES (%s, %s, %s, %s)
            ''',
            (user_id, recipient_id, encrypted_message, timestamp_utc)
        )
        cur.execute(
            '''
            INSERT INTO dialog_history (user_id, recipient_id, last_message)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id, recipient_id) DO UPDATE SET last_message = EXCLUDED.last_message
            ''',
            (user_id, recipient_id, timestamp_utc)
        )
        conn.commit()
    except Exception as e:
        sg.popup(f'Ошибка при отправке сообщения: {e}')
    finally:
        cur.close()
        conn.close()

def update_existing_messages():
    """Обновляет все существующие сообщения в базе, чтобы они были зашифрованы текущим ключом."""
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute("SELECT id, message FROM dialogs")
        messages = cur.fetchall()
        for message_id, old_message in messages:
            try:
                # Пытаемся расшифровать старое сообщение текущим ключом
                decrypted_message = decrypt_message(old_message)
                if decrypted_message:
                    # Перешифровываем сообщение текущим ключом
                    new_encrypted_message = encrypt_message(decrypted_message)
                    cur.execute(
                        "UPDATE dialogs SET message = %s WHERE id = %s",
                        (new_encrypted_message, message_id)
                    )
                    print(f"[DEBUG] Обновлено сообщение ID {message_id}")
            except Exception as e:
                print(f"[ERROR] Ошибка обновления сообщения ID {message_id}: {e}")
        conn.commit()
    except Exception as e:
        sg.popup(f'Ошибка обновления сообщений: {e}')
    finally:
        cur.close()
        conn.close()

def create_sql_dialog(current_user_id, recipient_id, refresh_user_buttons):
    """
    Создает диалог в базе данных, если его ещё нет, и обновляет кнопки диалогов.
    :param current_user_id: ID текущего пользователя.
    :param recipient_id: ID найденного пользователя.
    :param refresh_user_buttons: Функция для обновления кнопок диалогов.
    """
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        # Проверяем, существует ли уже диалог
        cur.execute(
            '''
            SELECT COUNT(*)
            FROM dialogs
            WHERE (user_id = %s AND recipient_id = %s) OR (user_id = %s AND recipient_id = %s)
            ''',
            (current_user_id, recipient_id, recipient_id, current_user_id)
        )
        if cur.fetchone()[0] == 0:
            # Диалог не существует, создаем новый
            raw_message = "Диалог начат"
            encrypted_message = encrypt_message(raw_message)
            if not encrypted_message:
                print("[ERROR] Не удалось зашифровать сообщение для создания диалога.")
                return

            cur.execute(
                '''
                INSERT INTO dialogs (user_id, recipient_id, message, timestamp)
                VALUES (%s, %s, %s, %s)
                ''',
                (current_user_id, recipient_id, encrypted_message, datetime.now())
            )
            cur.execute(
                '''
                INSERT INTO dialog_history (user_id, recipient_id, last_message)
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id, recipient_id) DO UPDATE SET last_message = EXCLUDED.last_message
                ''',
                (current_user_id, recipient_id, datetime.now())
            )
            conn.commit()
            print(f"[INFO] Диалог успешно создан: {current_user_id} -> {recipient_id}")
        else:
            print('[INFO] Диалог уже существует.')

        # Обновляем кнопки диалогов
        refresh_user_buttons()

    except Exception as e:
        print(f'[ERROR] Ошибка создания диалога: {e}')
    finally:
        cur.close()
        conn.close()

# Вспомогательные функции
def generate_key():
    return ''.join(random.choices('0123456789', k=6))

def update_user_photo(user_id, file_path):
    """Обновляет фото пользователя в базе данных."""
    try:
        if not file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
            raise ValueError("Файл должен быть изображением (.png, .jpg, .jpeg)")

        # Открытие изображения и изменение размера
        image = Image.open(file_path)
        image = image.resize((124, 124), Image.LANCZOS)

        # Сохранение изображения во временный файл
        temp_file_path = f'temp_avatar_{user_id}.png'
        image.save(temp_file_path, format='PNG')

        # Сохранение изображения в базе данных
        with open(temp_file_path, 'rb') as file:
            image_data = file.read()

        conn = connect_to_db()
        cur = conn.cursor()
        cur.execute("UPDATE users SET photo = %s WHERE id = %s", (image_data, user_id))
        conn.commit()

        # Удаление временного файла
        os.remove(temp_file_path)

        print(f"[INFO] Аватар пользователя {user_id} успешно обновлён.")
    except Exception as e:
        print(f"[ERROR] Ошибка обновления фото пользователя: {e}")
        raise

def play_sound_non_blocking(sound_path):
    """Воспроизводит звук в отдельном потоке."""
    threading.Thread(target=playsound, args=(sound_path,), daemon=True).start()

def process_avatar_image(avatar_path):
    """Обрабатывает изображение аватарки: изменяет размер до 124x124 и центрирует его."""
    target_size = (124, 124)
    try:
        with Image.open(avatar_path) as img:
            img = ImageOps.fit(img, target_size, method=Image.LANCZOS, centering=(0.5, 0.5))
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            print("Image processing successful.")
            return img_byte_arr.read()
    except Exception as e:
        print(f"[ERROR] Ошибка обработки аватарки: {e}")
        return None

def handle_avatar_selection(user_id):
    """Обрабатывает выбор аватара пользователя."""
    try:
        file_path = select_file()
        if not file_path:
            print("[INFO] Операция выбора аватара отменена.")
            return  # Прекращаем выполнение, если файл не выбран

        avatar_data = process_avatar_image(file_path)
        if avatar_data:
            update_user_photo(user_id, avatar_data)
            print("[INFO] Аватар успешно обновлён!")
        else:
            print("[ERROR] Ошибка обработки аватарки.")
    except Exception as e:
        print(f"[ERROR] Ошибка при обработке выбора аватара: {e}")

def select_file():
    """Выбор файла через tkinter с ограничением на изображения."""
    root = tk.Tk()
    root.withdraw()
    try:
        file_path = filedialog.askopenfilename(
            title="Выберите файл",
            filetypes=[("Изображения", "*.png;*.jpg;*.jpeg"), ("Все файлы", "*.*")],
        )
        if not file_path or not os.path.isfile(file_path):
            return None
        return file_path
    except Exception as e:
        print(f"[ERROR] Ошибка при выборе файла: {e}")
        return None

# Окна и их функции
def register_user(username, login, password, key, avatar_data):
    """Регистрация пользователя в базе данных."""
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute('SELECT COUNT(*) FROM users WHERE username = %s', (username,))
        if cur.fetchone()[0] > 0:
            sg.popup('Ошибка: Этот username уже занят. Пожалуйста, выберите другой.')
            return

        encrypted_login = encrypt_data(login)
        encrypted_password = encrypt_data(password)
        encrypted_key = encrypt_data(key)

        cur.execute(
            'INSERT INTO users (username, login, password, key, photo) VALUES (%s, %s, %s, %s, %s)',
            (username, encrypted_login, encrypted_password, encrypted_key, avatar_data)
        )
        conn.commit()
        sg.popup('Регистрация успешна!')
    except psycopg2.Error as e:
        sg.popup(f'Ошибка регистрации: {e}')
    finally:
        cur.close()
        conn.close()

def login_user(login, password, key, parent_window):
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute('SELECT * FROM users')
        rows = cur.fetchall()
        for row in rows:
            db_login = decrypt_data(row[2])
            db_password = decrypt_data(row[3])
            db_key = decrypt_data(row[4])

            if db_login == login and db_password == password and db_key == key:
                sg.popup(f'Авторизация успешна!')
                parent_window.close()
                dialog_window(row[0], row[1])  # Передача ID и username текущего пользователя
                return
        sg.popup('Ошибка: Неверные данные для входа')
    except Exception as e:
        sg.popup(f'Ошибка при авторизации: {e}')
    finally:
        cur.close()
        conn.close()

def main_menu():
    layout = [
        [sg.Image(filename=TEMP_BANNER if TEMP_BANNER else None), sg.Text("GhostVault", font=("impact", 80), text_color='#a8bbb7')],
        [sg.Button('Авторизация', font=("Helvetica"), pad=((280, 276), (0, 0)))],
        [sg.Text(" ")],
        [sg.Button('Регистрация', font=("Helvetica"), pad=((280, 276), (0, 0)))],
        [sg.Text(" ")],
        [sg.Button("Создать базу данных", font=('Halvetica'),pad=((250, 10), (0, 0)), key="-CONNECT-")],
        [sg.Text(" ")],
        [sg.Button("Подключиться к базе данных", font=('Halvetica'), pad=((225, 10), (0, 0)), key="-RECONNECT-")],
        [sg.Text(" ")],
        [sg.Button('Выход', font=("Helvetica"), pad=((300, 300), (0, 0)))]
    ]
    window = sg.Window('GhostVault', layout, size=(680, 480), finalize=True)
    try:
        while True:
            event, values = window.read()

            if event in (sg.WINDOW_CLOSED, 'Выход'):
                break  # Корректно завершаем цикл

            elif event == 'Регистрация':
                window.hide()
                registration_window()
                if window and not window.was_closed():  # :white_check_mark: Проверяем, не закрыто ли окно
                    window.un_hide()

            elif event == 'Авторизация':
                window.hide()
                login_window(window)
                if window and not window.was_closed():  # :white_check_mark: Проверяем перед вызовом
                    window.un_hide()

            elif event == "-CONNECT-":
                new_db_connect()

            elif event == "-RECONNECT-":
                edit_encrypted_database()

    except Exception as e:
        sg.popup_error("Произошла ошибка", str(e))

    finally:
        if window:  # :white_check_mark: Проверяем перед закрытием
            window.close()

def new_db_connect():
    layout = [
        [sg.Text("Подключение к серверу базы данных")],
        [sg.Text("Имя базы данных",pad=((1, 10), (0, 0))), sg.InputText(key="-DBNAME-")],
        [sg.Text("Пользователь",pad=((1, 33), (0, 0))), sg.InputText(key="-USER-")],
        [sg.Text("Пароль",pad=((1, 71), (0, 0))), sg.InputText(password_char='*', key="-PASSWORD-")],
        [sg.Text("Хост",pad=((1, 89), (0, 0))), sg.InputText(key="-HOST-")],
        [sg.Text("Порт",pad=((1, 88), (0, 0))), sg.InputText(key="-PORT-")],
        [sg.Button("Подключиться", pad=((180, 88), (0, 0)), key="-CONNECT-",)]
    ]

    window = sg.Window("Подключение к серверу базы данных", layout)
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED or event is None:
            break
        if event == "-CONNECT-":
            try:
                conn = psycopg2.connect(
                    dbname=values.get("-DBNAME-", "postgres"),
                    user=values.get("-USER-", "postgres"),
                    password=values.get("-PASSWORD-", ""),
                    host=values.get("-HOST-", "localhost"),
                    port=values.get("-PORT-", "5432"),
                )
                sg.popup("Подключение установлено", "Теперь создадим пользователя ghostvault")
                window.close()
                create_ghostvault_user(conn, values.get("-HOST-"), values.get("-PORT-"))
                conn.close()
                break
            except Exception as e:
                sg.popup_error("Ошибка", f"Ошибка подключения: {e}")
    window.close()

def login_window(parent_window):

    inner_layout = [
        [sg.Text('Логин', size=(6, 1), font=("Helvetica",14)), sg.Input(key='-LOGIN-')],
        [sg.Text('Пароль', size=(6, 1), font=("Helvetica",14)), sg.Input(password_char='*', key='-PASSWORD-')],
        [sg.Text('Ключ', size=(6, 1), font=("Helvetica",14)), sg.Input(key='-KEY-')],
        [sg.Text('')],
        [sg.Button('Войти', size=(60, 1), font=("Helvetica",10))]
    ]

    # Внешний макет с отступами
    layout = [
        [sg.Text('', size=(75, 1)),sg.Button('❌', size=(2, 1))],  # Верхний отступ
        [sg.Text('', size=(5, 1)), sg.Column(inner_layout), sg.Text('', size=(5, 1))],  # Отступы по бокам
        [sg.Text('', size=(2, 1))],  # Нижний отступ
    ]

    window1 = sg.Window('Авторизация', layout)

    while True:
        event, values = window1.read()
        if event == sg.WINDOW_CLOSED or event == '❌':
            break
        elif event == 'Войти':
            connect_to_db()
            login_user(values['-LOGIN-'], values['-PASSWORD-'], values['-KEY-'], parent_window)
            break

    window1.close()

def registration_window():
    """Окно регистрации."""
    generated_key = generate_key()

    # Основной макет
    inner_layout = [
        [sg.Text('Username', size=(10, 1), font=("Helvetica",14)), sg.Input(key='-USERNAME-')],
        [sg.Text('Логин', size=(10, 1), font=("Helvetica",14)), sg.Input(key='-LOGIN-')],
        [sg.Text('Пароль', size=(10, 1), font=("Helvetica",14)), sg.Input(password_char='*', key='-PASSWORD-')],
        [sg.Text('Ключ', size=(10, 1), font=("Helvetica",14)), sg.Input(default_text=generated_key, disabled=True,key='-KEY-', size=(39, 1),text_color="blue"),
         sg.Button('🔒')],
        [sg.Text('Аватарка:', size=(10, 1), font=("Helvetica",14)), sg.Input(key='-AVATAR-', size=(36, 1)),
         sg.FileBrowse(file_types=(("Images", "*.*"),))],
        [sg.Text('')],
        [sg.Button('Зарегистрироваться', size=(61, 1), font=("Helvetica",10))]
    ]

    # Внешний макет с отступами
    layout = [
        [sg.Text('', size=(75, 1)), sg.Button('❌', size=(2, 1))],  # Верхний отступ
        [sg.Text('', size=(5, 1)), sg.Column(inner_layout), sg.Text('', size=(5, 1))],  # Отступы по бокам
        [sg.Text('', size=(2, 1))],  # Нижний отступ
    ]
    window = sg.Window('Регистрация', layout, finalize=True)

    while True:
        event, values = window.read()
        if event == sg.WINDOW_CLOSED or event == '❌':
            break
        elif event == '🔒':
            new_key = generate_key()
            window['-KEY-'].update(new_key)
        elif event == 'Зарегистрироваться':
            connect_to_db()
            avatar_path = values['-AVATAR-'] or DEFAULT_AVATAR_PATH  # Используем дефолтную аватарку, если пользователь не выбрал
            avatar_data = process_avatar_image(avatar_path)  # Преобразуем изображение
            if not avatar_data:
                sg.popup("Ошибка обработки аватарки. Пожалуйста, выберите другое изображение.")
                continue

            register_user(
                username=values['-USERNAME-'],
                login=values['-LOGIN-'],
                password=values['-PASSWORD-'],
                key=values['-KEY-'],
                avatar_data=avatar_data
            )
            break
        elif event == '-AVATAR-':
            avatar_path = values['-AVATAR-']
            if avatar_path:
                avatar_preview = process_avatar_image(avatar_path)
                if avatar_preview:
                    with open("temp_avatar_preview.png", "wb") as temp_preview:
                        temp_preview.write(avatar_preview)
                    window['-AVATAR_PREVIEW-'].update(filename="temp_avatar_preview.png")

    window.close()

def on_connect_button_click():
    """Открывает окно ввода данных подключения."""
    layout = [
        [sg.Text("Имя базы данных"), sg.InputText(key="-DBNAME-")],
        [sg.Text("Пользователь"), sg.InputText(key="-USER-")],
        [sg.Text("Пароль"), sg.InputText(password_char='*', key="-PASSWORD-")],
        [sg.Text("Хост"), sg.InputText(key="-HOST-")],
        [sg.Text("Порт"), sg.InputText(key="-PORT-")],
        [sg.Button("Подключиться", key="-CONFIRM-")]
    ]

    window = sg.Window("Введите данные для подключения", layout)

    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            break
        if event == "-CONFIRM-":
            try:
                conn = connect_to_db(
                    values["-DBNAME-"],
                    values["-USER-"],
                    values["-PASSWORD-"],
                    values["-HOST-"],
                    values["-PORT-"],
                )
                if conn:
                    sg.popup("Успех", "Подключение к базе данных установлено!\nСохраняю данные в конфигурацию...")
                    save_new_config(
                        values["-DBNAME-"],
                        values["-USER-"],
                        values["-PASSWORD-"],
                        values["-HOST-"],
                        values["-PORT-"]
                    )
                    conn.close()
                    break
            except Exception as e:
                sg.popup_error("Ошибка", f"Не удалось подключиться к базе данных: {e}")

    window.close()

def dialog_window(current_user_id, username):
    """Главное окно с диалогами."""
    selected_user = None
    chat_history = None
    last_checked_message = None
    temp_files = []  # Список временных файлов аватарок
    message_queue = Queue()  # Очередь для новых сообщений

    def create_user_buttons(users):
        """Создаёт кнопки для пользователей."""
        return [[sg.Button(f'{user[1]}#{user[0]}', size=(30, 1), key=f'USER_{user[0]}')] for user in users]

    def convert_utc_to_local(utc_time, user_timezone="Europe/Moscow"):
        """Конвертирует время из UTC в локальное без смещения часового пояса."""
        if isinstance(utc_time, str):
            utc_time = datetime.strptime(utc_time, "%Y-%m-%d %H:%M:%S.%f%z")  # Преобразуем строку в datetime
        elif not isinstance(utc_time, datetime):
            raise ValueError("Неверный формат времени")

        utc_time = utc_time.replace(tzinfo=pytz.utc)  # Устанавливаем UTC таймзону
        local_time = utc_time.astimezone(pytz.timezone(user_timezone))  # Конвертируем в локальное время
        return local_time.strftime("%Y-%m-%d %H:%M:%S")  # Форматируем без смещения

    def format_timestamp(timestamp):
        """Форматирует временную метку, убирая +03:00 и приводя к локальному времени."""
        if isinstance(timestamp, datetime):
            utc_time = timestamp.replace(tzinfo=pytz.utc)  # Устанавливаем UTC-зону
        else:
            utc_time = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f%z")  # Парсим строку времени

        local_time = utc_time.astimezone(pytz.timezone("Europe/Moscow"))  # Переводим в локальное время
        return local_time.strftime("%Y-%m-%d %H:%M:%S")  # Возвращаем строку без +03:00

    def get_user_photo(user_id):
        """Получает фото пользователя из базы данных или возвращает дефолтное изображение."""
        conn = connect_to_db()
        cur = conn.cursor()
        try:
            cur.execute('SELECT photo FROM users WHERE id = %s', (user_id,))
            result = cur.fetchone()
            if result and result[0]:
                temp_photo_path = f'user_{user_id}_photo.png'
                with open(temp_photo_path, 'wb') as file:
                    file.write(result[0])
                temp_files.append(temp_photo_path)  # Добавляем в список временных файлов
                return temp_photo_path
            else:
                return DEFAULT_AVATAR_PATH
        except Exception as e:
            print(f"[ERROR] Ошибка получения фото пользователя: {e}")
            return DEFAULT_AVATAR_PATH
        finally:
            cur.close()
            conn.close()

    def delete_temp_files():
        """Удаляет все временные файлы аватарок."""
        for temp_file in temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                    print(f"[INFO] Временный файл {temp_file} удалён.")
            except Exception as e:
                print(f"[ERROR] Не удалось удалить временный файл {temp_file}: {e}")
        temp_files.clear()

    def refresh_chat():
        """Обновляет чат при наличии новых сообщений."""
        nonlocal chat_history, last_checked_message
        if not message_queue.empty():
            new_chat_history = message_queue.get()
            if new_chat_history != chat_history:
                chat_history = new_chat_history
                chat_text = '\n'.join(
                    [
                        f"[{format_timestamp(msg[2])}] {selected_user[1] if msg[0] == selected_user[0] else 'Вы'}: {msg[1]}"
                        for msg in chat_history]
                )
                visible_window['-CHAT-'].update(chat_text)

                # Проверяем последнее сообщение и воспроизводим звук только для входящих сообщений
                if chat_history:
                    last_message = chat_history[-1]
                    if last_message[0] != current_user_id and last_message != last_checked_message:
                        play_sound_non_blocking(NEW_MESSAGE_SOUND)
                        last_checked_message = last_message


    def fetch_chat_updates():
        """Фоновая задача для проверки новых сообщений."""
        nonlocal selected_user
        while True:
            if selected_user:
                new_chat_history = get_chat_history(current_user_id, selected_user[0])
                if new_chat_history != chat_history:
                    message_queue.put(new_chat_history)
            time.sleep(2)  # Проверка новых сообщений каждые 2 секунды

    def select_dialog_window(current_user_id):
        """Открывает окно выбора диалога."""

        def create_window_with_buttons(active_dialogs):
            """Создаёт новое окно выбора диалога с кнопками."""
            dialog_buttons = create_user_buttons(active_dialogs)
            layout = [
                [sg.Text('Выберите диалог или найдите пользователя')],
                [sg.Input(key='-SEARCH-', size=(30, 1)), sg.Button('Поиск')],
                [sg.Column(dialog_buttons, scrollable=True, size=(300, 400))],
                [sg.Button('Закрыть')]
            ]
            return sg.Window('Выбор диалога', layout, modal=True, finalize=True)

        active_dialogs = get_active_dialogs(current_user_id)
        dialog_window = create_window_with_buttons(active_dialogs)

        selected_user_local = None
        while True:
            event, values = dialog_window.read()
            if event == sg.WINDOW_CLOSED or event == 'Закрыть':
                break
            elif event.startswith('USER_'):
                selected_user_id = int(event.split('_')[1])
                selected_user_local = next((user for user in active_dialogs if user[0] == selected_user_id), None)
                break
            elif event == 'Поиск':
                search_query = values['-SEARCH-']
                if search_query:
                    try:
                        username, user_id = search_query.split('#', 1)
                        user_id = int(user_id.strip())
                        username = username.strip()

                        create_sql_dialog(current_user_id, user_id, lambda: None)
                        active_dialogs = get_active_dialogs(current_user_id)

                        dialog_window.close()
                        dialog_window = create_window_with_buttons(active_dialogs)
                    except ValueError:
                        sg.popup('Ошибка: Проверьте формат USERNAME#ID.')

        dialog_window.close()
        return selected_user_local

    def refresh_visible_window(active_dialogs, selected_user=None, chat_text=None):
        """Создает новое окно с обновленным интерфейсом."""
        left_column = [
            [sg.Image(filename=get_user_photo(current_user_id), size=(124, 124), key='-USER_AVATAR-')],
            [sg.Button('Выбрать диалог', size=(15, 1),)],
            [sg.Button('Информация о себе', size=(15, 1),)],
        ]

        right_column = [
            [sg.Text(f'Диалог с: {selected_user[1]}#{selected_user[0]}' if selected_user else "Диалог с: Не выбран",
                     size=(30, 1), font=('Helvetica', 16), key='-DIALOG_HEADER-')],
            [sg.Multiline(default_text=chat_text or "", size=(55, 15), key='-CHAT-', disabled=True,
                          autoscroll=True, font=('Helvetica', 16))],
            [sg.Input(key='-MESSAGE-', font=("Helvetica", 16)),
             sg.Button('Отправить', font=("Helvetica", 14), size=(10, 1))],
        ]

        layout = [
            [sg.Column(left_column), sg.VSeperator(), sg.Column(right_column)],
            [sg.Text(datetime.now().strftime('%H:%M:%S'), key='-CURRENT_TIME-', justification='right', expand_x=True)]
        ]

        return sg.Window('GhostVault - Диалоги', layout, finalize=True)

    threading.Thread(target=fetch_chat_updates, daemon=True).start()

    def update_avatar_window(current_user_id, username):
        """Окно информации о себе с возможностью обновления аватара."""
        info_text = f'Информация о: {username}#{current_user_id}'

        layout = [
            [sg.Text(info_text, font=("Helvetica", 14), justification='center', expand_x=True)],
            [
                sg.Image(filename=get_user_photo(current_user_id), size=(124, 124), key='-CURRENT_AVATAR-'),
                sg.Column([
                    [sg.Button('Скопировать', size=(15, 1))],
                    [sg.Button('Обновить аватарку', size=(15, 1))],
                    [sg.Button('Закрыть', size=(15, 1))]
                ])
            ]
        ]

        avatar_window = sg.Window('Информация о себе', layout, modal=True, finalize=True)

        while True:
            avatar_event, _ = avatar_window.read()
            if avatar_event in (sg.WINDOW_CLOSED, 'Закрыть'):
                break
            elif avatar_event == 'Скопировать':
                pyperclip.copy(f'{username}#{current_user_id}')
                sg.popup('ID скопирован в буфер обмена!')
            elif avatar_event == 'Обновить аватарку':
                file_path = sg.popup_get_file(
                    'Выберите новый аватар',
                    file_types=(("Изображения", "*.*"),)
                )
                if file_path:
                    try:
                        update_user_photo(current_user_id, file_path)
                        avatar_window['-CURRENT_AVATAR-'].update(filename=get_user_photo(current_user_id))
                        sg.popup('Аватар успешно обновлён!')
                    except Exception as e:
                        sg.popup(f'Ошибка обновления аватара: {e}')

        avatar_window.close()

    # Получаем активные диалоги
    active_dialogs = get_active_dialogs(current_user_id)

    # Создаем начальное окно
    visible_window = refresh_visible_window(active_dialogs)

    while True:
        event, values = visible_window.read(timeout=500)

        if event == sg.WINDOW_CLOSED:
            break

        # Обновление времени
        visible_window['-CURRENT_TIME-'].update(
            datetime.now(pytz.timezone("Europe/Moscow")).strftime('%H:%M:%S')
        )
        # Обновление чата
        refresh_chat()

        if event == 'Выбрать диалог':
            selected_user = select_dialog_window(current_user_id)
            if selected_user:
                visible_window['-DIALOG_HEADER-'].update(f'Диалог с: {selected_user[1]}#{selected_user[0]}')
                chat_history = get_chat_history(current_user_id, selected_user[0])
                chat_text = '\n'.join(
                    [
                        f"[{convert_utc_to_local(msg[2])}] {selected_user[1] if msg[0] == selected_user[0] else 'Вы'}: {msg[1]}"
                        for msg in chat_history]
                )
                visible_window['-CHAT-'].update(chat_text)


        elif event == 'Отправить':
            if selected_user and values['-MESSAGE-']:
                send_message(current_user_id, selected_user[0], values['-MESSAGE-'])
                visible_window['-MESSAGE-'].update('')

        elif event == 'Информация о себе':
            update_avatar_window(current_user_id, username)

            # После закрытия окна информации о себе нужно перерисовать главное окно
            visible_window.refresh()

    delete_temp_files()
    visible_window.close()

if __name__ == '__main__':
    main_menu()
